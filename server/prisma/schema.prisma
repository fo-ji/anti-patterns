// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          String       @id @default(uuid())
  title       String
  content     String
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  articleTags ArticleTag[]
  comments    Comment[]
  favorites   Favorite[]
}

model ArticleTag {
  id        String   @id @default(uuid())
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id           String         @id @default(uuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  articles     Article[]
  draftArtcles DraftArticle[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  aritcleId String
  aritcle   Article  @relation(fields: [aritcleId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DraftArticle {
  id               String             @id @default(uuid())
  title            String
  content          String
  categoryId       String
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  draftArticleTags DraftArticleTags[]
}

model DraftArticleTags {
  id             String       @id @default(uuid())
  tagId          String
  tag            Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)
  draftArticleId String
  draftArticle   DraftArticle @relation(fields: [draftArticleId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Favorite {
  id        String   @id @default(uuid())
  aritcleId String
  aritcle   Article  @relation(fields: [aritcleId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  articleTags      ArticleTag[]
  draftArticleTags DraftArticleTags[]
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String
  avatar        String
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  articles      Article[]
  draftArticles DraftArticle[]
  comments      Comment[]
  favorites     Favorite[]
}
